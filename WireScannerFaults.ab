' vi: syntax=basic noet

'TODO:
' 1. Remove print statements for production script
' 2. Handle re-entrant nature of fault handler
' 3. Feedback fault continues to spit out messages until acknowledged, filling up buffer
' 4. The Emergency Stop fault and the Communication Lost fault, however, can be
'	 reported when the axis is disabled.

HEADER
	INCLUDE "AeroBasicConstants.abi"
	DEFINE UPPER_LIMIT_MASK          AXISSTATUS_CwEOTLimit 
	DEFINE LOWER_LIMIT_MASK          AXISSTATUS_CcwEOTLimit
	DEFINE OVERCURRENT_MASK          AXISFAULT_OverCurrent
	DEFINE ENCODER_FAULT_MASK        AXISFAULT_EncoderFault
	DEFINE POSERROR_FAULT_MASK       AXISFAULT_PositionError
	DEFINE LOWER_LIMIT_FAULT_MASK    AXISFAULT_CcwEOTLimit
	DEFINE POSITION_FBK_MASK         AXISFAULT_PositionFbk
	
	DEFINE RECOVER_NO_OP             0  ' No operation
	DEFINE RECOVER_DISABLE           1  ' Disable immediately
	DEFINE RECOVER_RETRACT           2  ' Move to 0 and disable
	
	DEFINE iFaultVar                 60 ' IGLOBAL 60 to read back Fault 
	DEFINE iRecoverVar               61 ' IGLOBAL 61 to send to recovery task
	DEFINE FWSFaultMask              0x1C04CF
	DEFINE FWSFaultMaskNoOverCurrent 0x1C04CD
	DEFINE FWSFaultMaskNoCCWLimit    0x1C04C7
	DEFINE LinMotAxisNumber 		 0
END HEADER

DECLARATIONS
	GLOBAL FaultNum as INTEGER = 0
	
	' This includes: 
	'   * position error fault
	'	* --> over current <--
	'	* ccw/cw limits
	'	* position feedback fault
	'	* amplifier fault
	' 	* maximum velocity command fault
	'	* amplifier temperature fault
	'	* encoder fault
	' 	* communication lost fault
	
	GLOBAL XAxisStatus as INTEGER
	GLOBAL AtUpperLimit as INTEGER
	GLOBAL AtLowerLimit as INTEGER
	
	' Overcurrent Fault: average current is over the threshold
	' Feedback fault: encoder gets faulty/disconnected encoder
	' PosError Fault: Pos Cmd - Pos Fbk > Threshold
	' Encoder Fault: Fault input on J103 connector Pin#23 ' Do not have for FWS chassis
	GLOBAL FaultStatus as INTEGER
	GLOBAL OverCurrent as INTEGER
	GLOBAL PosErrorFault as INTEGER
	GLOBAL EncoderFault as INTEGER
	GLOBAL FeedbackFault as INTEGER
	GLOBAL LowerLimitFault as INTEGER
	
END DECLARATIONS

PROGRAM
    'Clear the recovery iglobal variable
    IGLOBAL(iRecoverVar) = RECOVER_NO_OP
	CALL LinMotEnable(LinMotAxisNumber)
	
	ONAXISFAULT AxisFaultHandler
	ONTASKERROR TaskErrorHandler
	SETPARM @LinMotAxisNumber,FaultMask,FWSFaultMask
	while (1)
		SETJMP
		
		TEST = TASKSTATE(3)
		if (TEST = TASKSTATE_Error) AND IGLOBAL(iRecoverVar) != RECOVER_NO_OP THEN
			SETPARM @LinMotAxisNumber,FaultMask,FWSFaultMask
			PROGRAM RUN 3, "RecoveryHandler.bcx"
		END IF
		'CHECK FAULTMASK VALUE
		'TEST=GETPARM (@LinMotAxisNumber, FaultMask)
		'IF (TEST != FWSFaultMask) THEN
		'	SETPARM @LinMotAxisNumber,FaultMask,FWSFaultMask
		'END IF
	wend
END PROGRAM


FUNCTION LinMotEnable(ByVal Axis as integer)
	SETPARM @Axis,FaultMask,FWSFaultMaskNoCCWLimit
	FAULTACK @Axis
	dwell .1
	ENABLE @Axis
	dwell .1
	SETPARM @Axis,FaultMask,FWSFaultMask
END FUNCTION


FUNCTION TaskErrorHandler ()
	'ACKNOWLEDGEALL
	' Reset the fault mask
	'SETPARM @LinMotAxisNumber,FaultMask,FWSFaultMask
	'PROGRAM RUN 3, "RecoveryHandler.bcx"
	LONGJMP
END FUNCTION


FUNCTION AxisFaultHandler ()
	FaultStatus = AXISFAULT(@LinMotAxisNumber)
	'FAULTACK @LinMotAxisNumber

	if IGLOBAL(iRecoverVar) != RECOVER_NO_OP then
		' Recovery script has not yet handled it...
		LONGJMP
	end if
	
	IGLOBAL(iFaultVar) = FaultStatus
	
	XAxisStatus = AXISSTATUS(@LinMotAxisNumber) 
	AtUpperLimit = XAxisStatus BAND UPPER_LIMIT_MASK
	AtLowerLimit = XAxisStatus BAND LOWER_LIMIT_MASK
	
	PosErrorFault = FaultStatus BAND POSERROR_FAULT_MASK
	EncoderFault = FaultStatus BAND ENCODER_FAULT_MASK
	OverCurrent = FaultStatus BAND OVERCURRENT_MASK
	FeedbackFault = FaultStatus BAND POSITION_FBK_MASK
	LowerLimitFault = FaultStatus BAND LOWER_LIMIT_FAULT_MASK
	
	'IGLOBAL(iRecoverVar) = RECOVER_DISABLE
	
	if (OverCurrent = OVERCURRENT_MASK) then
		print "(OC) "
	end if
	
	'if (FeedbackFault = POSITION_FBK_MASK) then
	'	print "(FB) "
	'end if
	
	IF (FeedbackFault = POSITION_FBK_MASK) THEN
		' Perform default action: disable
		' Encoder physically disconnected
		IF (AtLowerLimit = LOWER_LIMIT_MASK) or (LowerLimitFault = LOWER_LIMIT_FAULT_MASK) THEN
			PRINT "Feedback@lower: "
		ELSE
			' TODO: open-loop motion to negative limit?
			' MSET @LinMotAxisNumber, 2, 0 ' ?
			PRINT "Feedback: "
		END IF
		IGLOBAL(iRecoverVar) = RECOVER_DISABLE
	' The remaining conditions will be evaluated based on limit switch status:
	'	* over current
	'	* amplifier fault
	'	* position error (following) fault
	' 	* maximum velocity command fault
	'	* amplifier temperature fault
	' 	* communication lost fault
	ELSEIF (AtUpperLimit = UPPER_LIMIT_MASK) AND (AtLowerLimit = LOWER_LIMIT_MASK) THEN
		' Both limits ON!! Limit issue
		PRINT "Limit issue! "
		' Perform default action: disable
		IGLOBAL(iRecoverVar) = RECOVER_DISABLE
	ELSEIF (AtUpperLimit = UPPER_LIMIT_MASK) THEN
		PRINT "@upper: "
		'ELIMINATE RMS CURRENT ERROR FROM MASK SO THAT WE CAN MOVE
		IGLOBAL(iRecoverVar) = RECOVER_RETRACT
	ELSEIF (AtLowerLimit = LOWER_LIMIT_MASK) or (LowerLimitFault = LOWER_LIMIT_FAULT_MASK) THEN
		' PRINT "@lower: "
		IF (OverCurrent = OVERCURRENT_MASK) or (PosErrorFault = POSERROR_FAULT_MASK)  THEN
			PRINT "Overcurrent @lower: "
			' Perform default action: disable
			IGLOBAL(iRecoverVar) = RECOVER_DISABLE
		ELSE
			IGLOBAL(iRecoverVar) = RECOVER_NO_OP
			FAULTACK @LinMotAxisNumber
		END IF
	ELSEIF (FaultStatus = 0) THEN
		IGLOBAL(iRecoverVar) = RECOVER_NO_OP
	ELSE
		PRINT "General fault: "
		' Move to 0 and disable
		IGLOBAL(iRecoverVar) = RECOVER_RETRACT
	END IF
	
	LONGJMP
END FUNCTION
